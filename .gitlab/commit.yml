stages:
  - test
  - build
  - integration
  - release

test:
    stage: test
    needs: []
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20230115
    coverage: '/Total coverage: \d+.\d+%/'
    artifacts:
      when: always
      expire_in: 2 weeks
      paths:
        - coverage.txt
        - coverage.xml
        - junit.xml
      reports:
        junit: junit.xml
        coverage_report: 
          coverage_format: cobertura
          path: coverage.xml
    before_script:
      - go install github.com/bwplotka/bingo@v0.7.0
      - bingo get
    script:
      - make test

checks:
    stage: test
    needs: []
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20230115
    parallel:
      matrix:
        - CHECK: lint
        - CHECK: linti
        - CHECK: vet
        - CHECK: staticcheck
        - CHECK: git-state
    before_script:
      - go install github.com/bwplotka/bingo@v0.7.0
      - bingo get
    script:
      # XDG_CACHE_HOME is needed by staticcheck
      - export XDG_CACHE_HOME=/tmp/mwcli-cache
      - make $CHECK

tools:
    stage: test
    needs: []
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20230115
    parallel:
      matrix:
        - TOOL: ./tools/image-update/check/check.go
        - TOOL: ./tools/image-update/update/update.go foo bar
        # docs-gen tool is tested as docs are generated
        # lint tool is checked as linting is run
    script:
      - go run $TOOL

build:
    stage: build
    needs: []
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20230115
    artifacts:
      paths:
        - bin/
    before_script:
      - go install github.com/bwplotka/bingo@v0.7.0
      - bingo get
    script:
      - make build

integration-trigger:
    stage: integration
    needs: [checks,test,build]
    trigger:
        include: .gitlab-ci.commit.integration.yml
        strategy: depend

build-release:
    except:
      - tags
    stage: release
    needs: [build,integration-trigger]
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20230115
    before_script:
      - go install github.com/bwplotka/bingo@v0.7.0
      - bingo get
    script:
      - make release VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_BRANCH}

build-docs:
    except:
      - tags
    stage: release
    needs: [build,integration-trigger]
    image: golang:1.17
    before_script:
      - apt update
      - apt -y install pandoc
    script:
      - make docs

release-build:
    only:
      - tags
    stage: release
    needs: [build,integration-trigger]
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20230115
    artifacts:
      paths:
        - _release/
    before_script:
      - go install github.com/bwplotka/bingo@v0.7.0
      - bingo get
    script:
      - make release VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_BRANCH}

release-upload:
  only:
    - tags
  stage: release
  needs: [release-build]
  dependencies:
    - release-build
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install curl
  # https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-generic-package-by-using-cicd
  script:
    - echo "Placeholder job, as a conditional upload currently happens as part of release-build awaiting decision on https://phabricator.wikimedia.org/T292372"
    - >
      for release_path in  $(find ./_release -type f); do
        release_file=$(echo $release_path | sed "s/.*\///")
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${release_path} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mwcli/${CI_COMMIT_TAG}/${release_file}"
      done

release-publish:
  only:
    - tags
  stage: release
  needs: [release-upload,release-build]
  dependencies:
    - release-build
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - (echo "## ${CI_COMMIT_TAG}" && echo "CHANGELOG extracted from https://gitlab.wikimedia.org/repos/releng/cli/-/blob/main/CHANGELOG.md" && sed "/^## ${CI_COMMIT_TAG}$/,/^## /"'!d'";//d;/\^$/d" CHANGELOG.md) > .gitlab.description.md
    - assets_links=""
    - >
      for release_path in  $(find ./_release -type f); do
        release_file=$(echo $release_path | sed "s/.*\///")
        assets_links="${assets_links} --assets-link {\"name\":\"${release_file}\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mwcli/${CI_COMMIT_TAG}/${release_file}\"}"
      done
    - release-cli create --name "Release $CI_COMMIT_TAG" --description ".gitlab.description.md" --released-at "${CI_COMMIT_TIMESTAMP}" ${assets_links}

release-docs:
    only:
      - tags
    stage: release
    needs: [release-publish]
    image: golang:1.17
    before_script:
      - apt update
      - apt -y install pandoc
    script:
      - make docs
      - make user="$DOCS_UPDATE_USER" password="$DOCS_UPDATE_PASS" docs-publish
