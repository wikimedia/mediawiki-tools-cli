variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - test
  - build
  - integration
  - release

# The plan would be for this cache to be reused by all jobs.
# Caches currently end up cached per runner, per job concurrency level and per md5 of path?
# So there are lots of duplicate caches that end up needing to be populated right now?
# https://forum.gitlab.com/t/confusion-around-ci-docker-cache-volumes-and-sharing-across-jobs-concurrency/56793
# Docker cache volumes look like this runner-<short-token>-project-<id>-concurrent-<concurrency-id>-cache-<md5-of-path>
cache:
  - key: mediawiki
    paths:
      - .mediawiki

test:
    stage: test
    needs: []
    cache: {}
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20221002
    coverage: '/Total coverage: \d+.\d+%/'
    artifacts:
      when: always
      expire_in: 2 weeks
      paths:
        - coverage.txt
        - coverage.xml
        - junit.xml
      reports:
        junit: junit.xml
        coverage_report: 
          coverage_format: cobertura
          path: coverage.xml
    before_script:
      - go install github.com/bwplotka/bingo@latest
      - bingo get
    script:
      - make test

checks:
    stage: test
    needs: []
    cache: {}
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20221002
    parallel:
      matrix:
        - CHECK: lint
        - CHECK: vet
        - CHECK: staticcheck
        - CHECK: git-state
    before_script:
      - go install github.com/bwplotka/bingo@latest
      - bingo get
    script:
      # XDG_CACHE_HOME is needed by staticcheck
      - export XDG_CACHE_HOME=/tmp/mwcli-cache
      - make $CHECK

build:
    stage: build
    needs: []
    cache: {}
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20221002
    artifacts:
      paths:
        - bin/
    before_script:
      - go install github.com/bwplotka/bingo@latest
      - bingo get
    script:
      - make build


integration-general:
    stage: integration
    services:
    - name: docker:20.10.14-dind
    tags:
    - mwcli
    needs: [checks,test,build]
    cache: {}
    tags:
    - mwcli
    dependencies:
      - build
    parallel:
      matrix:
        - TEST: test-general-commands.sh
    before_script:
      # libc6-compat needed because https://stackoverflow.com/questions/36279253/go-compiled-binary-wont-run-in-an-alpine-docker-container-on-ubuntu-host
      - apk add --no-cache libc6-compat bash
    script:
      - ./tests/$TEST

integration-docker:
    stage: integration
    services:
    - name: docker:20.10.14-dind
    needs: [checks,test,build]
    tags:
    - mwcli
    dependencies:
      - build
    parallel:
      matrix:
        - TEST: test-docker-general.sh
        - TEST: test-docker-mw-all-dbs.sh
        - TEST: test-docker-mw-mysql-cycle.sh
    before_script:
      # libc6-compat needed because https://stackoverflow.com/questions/36279253/go-compiled-binary-wont-run-in-an-alpine-docker-container-on-ubuntu-host
      - apk add --no-cache libc6-compat bash docker-compose curl tar
    script:
      - ./tests/$TEST

build-release:
    except:
      - tags
    stage: release
    needs: [build,integration-general,integration-docker]
    cache: {}
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20221002
    before_script:
      - go install github.com/bwplotka/bingo@latest
      - bingo get
    script:
      - make release VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_BRANCH}

release-build:
    only:
      - tags
    stage: release
    needs: [build,integration-general,integration-docker]
    cache: {}
    image: docker-registry.wikimedia.org/golang1.17:1.17-1-20221002
    artifacts:
      paths:
        - _release/
    before_script:
      - go install github.com/bwplotka/bingo@latest
      - bingo get
    script:
      - make release VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_BRANCH}

release-upload:
  only:
    - tags
  stage: release
  needs: [release-build]
  tags:
  - mwcli
  dependencies:
    - release-build
  # Has 1 requirement of curl, could be replaced by a wmf releng image?
  image: alpine:latest
  # Must run on mwcli runner, as alpine:* images are not on shared runners (for now)
  before_script:
    - apk update
    - apk add curl
  # https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-generic-package-by-using-cicd
  script:
    - echo "Placeholder job, as a conditional upload currently happens as part of release-build awaiting decision on https://phabricator.wikimedia.org/T292372"
    - >
      for release_path in  $(find ./_release -type f); do
        release_file=$(echo $release_path | sed "s/.*\///")
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${release_path} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mwcli/${CI_COMMIT_TAG}/${release_file}"
      done

release-publish:
  only:
    - tags
  stage: release
  needs: [release-upload,release-build]
  tags:
  - mwcli
  dependencies:
    - release-build
  # Allowed in shared runners https://github.com/wikimedia/puppet/blob/production/modules/gitlab_runner/templates/config.toml.erb#L50
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - (echo "## ${CI_COMMIT_TAG}" && echo "CHANGELOG extracted from https://gitlab.wikimedia.org/repos/releng/cli/-/blob/main/CHANGELOG.md" && sed "/^## ${CI_COMMIT_TAG}$/,/^## /"'!d'";//d;/\^$/d" CHANGELOG.md) > .gitlab.description.md
    - assets_links=""
    - >
      for release_path in  $(find ./_release -type f); do
        release_file=$(echo $release_path | sed "s/.*\///")
        assets_links="${assets_links} --assets-link {\"name\":\"${release_file}\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mwcli/${CI_COMMIT_TAG}/${release_file}\"}"
      done
    - release-cli create --name "Release $CI_COMMIT_TAG" --description ".gitlab.description.md" --released-at "${CI_COMMIT_TIMESTAMP}" ${assets_links}
