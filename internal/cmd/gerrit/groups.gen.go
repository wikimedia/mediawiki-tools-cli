package gerrit

import (
	gogerrit "github.com/andygrunwald/go-gerrit"
	cobra "github.com/spf13/cobra"
	output "gitlab.wikimedia.org/repos/releng/cli/internal/util/output"
	"io"
)

// This code is generated by tools/code-gen/main.go. DO NOT EDIT.
func NewGerritGroupsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Group Endpoints",
		Use:     "groups",
	}
	cmd.AddCommand(NewGerritGroupsListCmd())
	cmd.AddCommand(NewGerritGroupsGetCmd())
	cmd.AddCommand(NewGerritGroupsDetailCmd())
	cmd.AddCommand(NewGerritGroupsNameCmd())
	cmd.AddCommand(NewGerritGroupsDescriptionCmd())
	cmd.AddCommand(NewGerritGroupsOptionsCmd())
	cmd.AddCommand(NewGerritGroupsOwnerCmd())
	cmd.AddCommand(NewGerritGroupsGetAuditLogCmd())
	cmd.AddCommand(NewGerritGroupsMembersCmd())
	cmd.AddCommand(NewGerritGroupsGroupsCmd())
	return cmd
}
func NewGerritGroupsListCmd() *cobra.Command {
	type flags struct {
		query string
		limit string
		start string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/"
			path = addParamToPath(path, "query", cmdFlags.query)
			path = addParamToPath(path, "limit", cmdFlags.limit)
			path = addParamToPath(path, "start", cmdFlags.start)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "List Groups",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.query, "query", "", "The query string to use to find changes.")
	cmd.Flags().StringVar(&cmdFlags.limit, "limit", "", "The maximum number of records to return.")
	cmd.Flags().StringVar(&cmdFlags.start, "start", "", "The index of the first record to return.")
	return cmd
}
func NewGerritGroupsGetCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Get a Group",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsDetailCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/detail/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Get a Group detail",
		Use:   "detail",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsNameCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Group name",
		Use:     "name",
	}
	cmd.AddCommand(NewGerritGroupsNameGetCmd())
	return cmd
}
func NewGerritGroupsNameGetCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/name/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Retrieves the name of a group.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsDescriptionCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Get a Group description",
		Use:     "description",
	}
	cmd.AddCommand(NewGerritGroupsDescriptionGetCmd())
	return cmd
}
func NewGerritGroupsDescriptionGetCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/description/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Retrieves the description of a group.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsOptionsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Get a Group options",
		Use:     "options",
	}
	cmd.AddCommand(NewGerritGroupsOptionsGetCmd())
	return cmd
}
func NewGerritGroupsOptionsGetCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/options/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Retrieves the options of a group.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsOwnerCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Get a Group owner",
		Use:     "owner",
	}
	cmd.AddCommand(NewGerritGroupsOwnerGetCmd())
	return cmd
}
func NewGerritGroupsOwnerGetCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/owner/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Retrieves the owner of a group.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsGetAuditLogCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/log.audit/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Get a Group audit log",
		Use:   "get-audit-log",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsMembersCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Group members",
		Use:     "members",
	}
	cmd.AddCommand(NewGerritGroupsMembersListCmd())
	cmd.AddCommand(NewGerritGroupsMembersGetCmd())
	return cmd
}
func NewGerritGroupsMembersListCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/members/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Lists the members of a group.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsMembersGetCmd() *cobra.Command {
	type flags struct {
		group  string
		member string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/members/{member-id}/"
			path = addParamToPath(path, "group-id", cmdFlags.group)
			path = addParamToPath(path, "member-id", cmdFlags.member)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Retrieves a member of a group.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	cmd.Flags().StringVar(&cmdFlags.member, "member", "", "The member to retrieve.")
	cmd.MarkFlagRequired("member")
	return cmd
}
func NewGerritGroupsGroupsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Group sub groups",
		Use:     "groups",
	}
	cmd.AddCommand(NewGerritGroupsGroupsListCmd())
	cmd.AddCommand(NewGerritGroupsGroupsGetCmd())
	return cmd
}
func NewGerritGroupsGroupsListCmd() *cobra.Command {
	type flags struct {
		group string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/groups/"
			path = addParamToPath(path, "group-id", cmdFlags.group)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Lists the sub groups of a group.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	return cmd
}
func NewGerritGroupsGroupsGetCmd() *cobra.Command {
	type flags struct {
		group    string
		subgroup string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		RunE: func(cmd *cobra.Command, args []string) error {
			path := "/groups/{group-id}/groups/{subgroup-id}/"
			path = addParamToPath(path, "group-id", cmdFlags.group)
			path = addParamToPath(path, "subgroup-id", cmdFlags.subgroup)

			client := authenticatedClient(cmd.Context())
			response, err := client.Call(cmd.Context(), "GET", path, nil, nil)
			if err != nil {
				return err
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			output.NewJSONFromString(string(body), "", false).Print(cmd.OutOrStdout())
			return nil
		},
		Short: "Retrieves a sub group of a group.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.group, "group", "", "The group to retrieve.")
	cmd.MarkFlagRequired("group")
	cmd.Flags().StringVar(&cmdFlags.subgroup, "subgroup", "", "The subgroup to retrieve.")
	cmd.MarkFlagRequired("subgroup")
	return cmd
}
