package gerrit

import (
	"fmt"
	gogerrit "github.com/andygrunwald/go-gerrit"
	logrus "github.com/sirupsen/logrus"
	cobra "github.com/spf13/cobra"
	"io/ioutil"
)

// This code is generated by tools/code-gen/main.go. DO NOT EDIT.
func NewGerritPluginsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Plugin Endpoints",
		Use:     "plugins",
	}
	cmd.AddCommand(NewGerritPluginsListCmd())
	cmd.AddCommand(NewGerritPluginsGetCmd())
	cmd.AddCommand(NewGerritPluginsEnableCmd())
	cmd.AddCommand(NewGerritPluginsDisableCmd())
	cmd.AddCommand(NewGerritPluginsReloadCmd())
	return cmd
}
func NewGerritPluginsListCmd() *cobra.Command {
	type flags struct {
		limit     string
		skip      string
		prefix    string
		regex     string
		substring string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/plugins/"
			path = addParamToPath(path, "n", cmdFlags.limit)
			path = addParamToPath(path, "S", cmdFlags.skip)
			path = addParamToPath(path, "p", cmdFlags.prefix)
			path = addParamToPath(path, "r", cmdFlags.regex)
			path = addParamToPath(path, "m", cmdFlags.substring)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "List plugins",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.limit, "limit", "", "Maximum number of plugins to return.")
	cmd.Flags().StringVar(&cmdFlags.skip, "skip", "", "Skip the given number of plugins from the beginning of the list.")
	cmd.Flags().StringVar(&cmdFlags.prefix, "prefix", "", "Prefix to filter plugins by.")
	cmd.Flags().StringVar(&cmdFlags.regex, "regex", "", "Regular expression to filter plugins by.")
	cmd.Flags().StringVar(&cmdFlags.substring, "substring", "", "Substring to filter plugins by.")
	return cmd
}
func NewGerritPluginsGetCmd() *cobra.Command {
	type flags struct {
		plugin string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/plugins/{plugin-id}/gerrit~status/"
			path = addParamToPath(path, "plugin-id", cmdFlags.plugin)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Get plugin",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.plugin, "plugin", "", "The plugin to retrieve.")
	cmd.MarkFlagRequired("plugin")
	return cmd
}
func NewGerritPluginsEnableCmd() *cobra.Command {
	type flags struct {
		plugin string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/plugins/{plugin-id}/gerrit~enable/"
			path = addParamToPath(path, "plugin-id", cmdFlags.plugin)

			client := authenticatedClient()
			response, err := client.Call("POST", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Enable plugin",
		Use:   "enable",
	}
	cmd.Flags().StringVar(&cmdFlags.plugin, "plugin", "", "The plugin to enable.")
	cmd.MarkFlagRequired("plugin")
	return cmd
}
func NewGerritPluginsDisableCmd() *cobra.Command {
	type flags struct {
		plugin string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/plugins/{plugin-id}/gerrit~disable/"
			path = addParamToPath(path, "plugin-id", cmdFlags.plugin)

			client := authenticatedClient()
			response, err := client.Call("POST", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Disable plugin",
		Use:   "disable",
	}
	cmd.Flags().StringVar(&cmdFlags.plugin, "plugin", "", "The plugin to disable.")
	cmd.MarkFlagRequired("plugin")
	return cmd
}
func NewGerritPluginsReloadCmd() *cobra.Command {
	type flags struct {
		plugin string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/plugins/{plugin-id}/gerrit~reload/"
			path = addParamToPath(path, "plugin-id", cmdFlags.plugin)

			client := authenticatedClient()
			response, err := client.Call("POST", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Reload plugin",
		Use:   "reload",
	}
	cmd.Flags().StringVar(&cmdFlags.plugin, "plugin", "", "The plugin to reload.")
	cmd.MarkFlagRequired("plugin")
	return cmd
}
