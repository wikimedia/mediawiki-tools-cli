package gerrit

import (
	"fmt"
	gogerrit "github.com/andygrunwald/go-gerrit"
	logrus "github.com/sirupsen/logrus"
	cobra "github.com/spf13/cobra"
	"io/ioutil"
)

// This code is generated by tools/code-gen/main.go. DO NOT EDIT.
func NewGerritAccountsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Accounts Endpoints",
		Use:     "accounts",
	}
	cmd.AddCommand(NewGerritAccountsListCmd())
	cmd.AddCommand(NewGerritAccountsGetCmd())
	cmd.AddCommand(NewGerritAccountsCreateCmd())
	cmd.AddCommand(NewGerritAccountsDetailsCmd())
	cmd.AddCommand(NewGerritAccountsNameCmd())
	cmd.AddCommand(NewGerritAccountsStatusCmd())
	cmd.AddCommand(NewGerritAccountsUsernameCmd())
	cmd.AddCommand(NewGerritAccountsDisplaynameCmd())
	cmd.AddCommand(NewGerritAccountsActiveCmd())
	cmd.AddCommand(NewGerritAccountsOauthtokenCmd())
	cmd.AddCommand(NewGerritAccountsEmailsCmd())
	cmd.AddCommand(NewGerritAccountsSshkeysCmd())
	cmd.AddCommand(NewGerritAccountsGpgkeysCmd())
	cmd.AddCommand(NewGerritAccountsCapabilitiesCmd())
	cmd.AddCommand(NewGerritAccountsGroupsCmd())
	cmd.AddCommand(NewGerritAccountsAvatarCmd())
	cmd.AddCommand(NewGerritAccountsPreferencesCmd())
	cmd.AddCommand(NewGerritAccountsWatchedProjectsCmd())
	cmd.AddCommand(NewGerritAccountsExternalIdsCmd())
	cmd.AddCommand(NewGerritAccountsAgreementsCmd())
	cmd.AddCommand(NewGerritAccountsStarredChangesCmd())
	cmd.AddCommand(NewGerritAccountsIndexCmd())
	return cmd
}
func NewGerritAccountsListCmd() *cobra.Command {
	type flags struct {
		query string
		limit string
		start string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/"
			path = addParamToPath(path, "q", cmdFlags.query)
			path = addParamToPath(path, "n", cmdFlags.limit)
			path = addParamToPath(path, "start", cmdFlags.start)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "List Accounts",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.query, "query", "", "The query string to use to find accounts. The query string is a space-separated list of terms. Each term can be a single word or a quoted phrase. A quoted phrase matches the exact string. A single word matches any account that contains that word as a substring. The query string is case-insensitive.")
	cmd.Flags().StringVar(&cmdFlags.limit, "limit", "", "The maximum number of accounts to return. If not specified, the server default is used.")
	cmd.Flags().StringVar(&cmdFlags.start, "start", "", "The index of the first account to return. If not specified, the server default is used.")
	return cmd
}
func NewGerritAccountsGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Get Account",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsCreateCmd() *cobra.Command {
	type flags struct {
		username string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Short:   "Create Account",
		Use:     "create",
	}
	cmd.Flags().StringVar(&cmdFlags.username, "username", "", "The username to create.")
	cmd.MarkFlagRequired("username")
	return cmd
}
func NewGerritAccountsDetailsCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/detail/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Get Account Details",
		Use:   "details",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsNameCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Account Name",
		Use:     "name",
	}
	cmd.AddCommand(NewGerritAccountsNameGetCmd())
	cmd.AddCommand(NewGerritAccountsNameSetCmd())
	cmd.AddCommand(NewGerritAccountsNameDeleteCmd())
	return cmd
}
func NewGerritAccountsNameGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/name/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Gets the account name",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsNameSetCmd() *cobra.Command {
	type flags struct {
		account string
		name    string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/name/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "name", cmdFlags.name)

			client := authenticatedClient()
			response, err := client.Call("PUT", path, cmdFlags.name, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Sets the account name",
		Use:   "set",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.name, "name", "", "The name to set.")
	cmd.MarkFlagRequired("name")
	return cmd
}
func NewGerritAccountsNameDeleteCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/name/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("DELETE", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Deletes the account name",
		Use:   "delete",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsStatusCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Account Status",
		Use:     "status",
	}
	cmd.AddCommand(NewGerritAccountsStatusGetCmd())
	cmd.AddCommand(NewGerritAccountsStatusSetCmd())
	return cmd
}
func NewGerritAccountsStatusGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/status/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Gets the account status",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsStatusSetCmd() *cobra.Command {
	type flags struct {
		account string
		status  string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/status/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "status", cmdFlags.status)

			client := authenticatedClient()
			response, err := client.Call("PUT", path, cmdFlags.status, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Sets the account status",
		Use:   "set",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.status, "status", "", "The status to set.")
	cmd.MarkFlagRequired("status")
	return cmd
}
func NewGerritAccountsUsernameCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Account Username",
		Use:     "username",
	}
	cmd.AddCommand(NewGerritAccountsUsernameGetCmd())
	cmd.AddCommand(NewGerritAccountsUsernameSetCmd())
	return cmd
}
func NewGerritAccountsUsernameGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/username/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Gets the account username",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsUsernameSetCmd() *cobra.Command {
	type flags struct {
		account  string
		username string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/username/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "username", cmdFlags.username)

			client := authenticatedClient()
			response, err := client.Call("PUT", path, cmdFlags.username, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Sets the account username",
		Use:   "set",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.username, "username", "", "The username to set.")
	cmd.MarkFlagRequired("username")
	return cmd
}
func NewGerritAccountsDisplaynameCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Account display name",
		Use:     "displayname",
	}
	cmd.AddCommand(NewGerritAccountsDisplaynameSetCmd())
	return cmd
}
func NewGerritAccountsDisplaynameSetCmd() *cobra.Command {
	type flags struct {
		account     string
		displayname string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/displayname/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "displayname", cmdFlags.displayname)

			client := authenticatedClient()
			response, err := client.Call("PUT", path, cmdFlags.displayname, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Sets the account display name",
		Use:   "set",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.displayname, "displayname", "", "The display name to set.")
	cmd.MarkFlagRequired("displayname")
	return cmd
}
func NewGerritAccountsActiveCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Account active",
		Use:     "active",
	}
	cmd.AddCommand(NewGerritAccountsActiveGetCmd())
	cmd.AddCommand(NewGerritAccountsActiveSetCmd())
	cmd.AddCommand(NewGerritAccountsActiveDeleteCmd())
	return cmd
}
func NewGerritAccountsActiveGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/active/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Gets the account active status",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsActiveSetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/active/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("PUT", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Sets the account active status",
		Use:   "set",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsActiveDeleteCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/active/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("DELETE", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Deletes the account active status",
		Use:   "delete",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsOauthtokenCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "OAuth access token.",
		Use:     "oauthtoken",
	}
	cmd.AddCommand(NewGerritAccountsOauthtokenGetCmd())
	return cmd
}
func NewGerritAccountsOauthtokenGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/oauthtoken/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Gets the account OAuth access token.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsEmailsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Email addresses that are configured for the specified user.",
		Use:     "emails",
	}
	cmd.AddCommand(NewGerritAccountsEmailsListCmd())
	cmd.AddCommand(NewGerritAccountsEmailsGetCmd())
	cmd.AddCommand(NewGerritAccountsEmailsCreateCmd())
	cmd.AddCommand(NewGerritAccountsEmailsDeleteCmd())
	cmd.AddCommand(NewGerritAccountsEmailsPreferCmd())
	return cmd
}
func NewGerritAccountsEmailsListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/emails/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Returns the email addresses of an account.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsEmailsGetCmd() *cobra.Command {
	type flags struct {
		account string
		email   string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/emails/{email-id}"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "email-id", cmdFlags.email)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Returns the email address specified.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.email, "email", "", "The email to get.")
	cmd.MarkFlagRequired("email")
	return cmd
}
func NewGerritAccountsEmailsCreateCmd() *cobra.Command {
	type flags struct {
		account string
		email   string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/emails/{email-id}/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "email-id", cmdFlags.email)

			client := authenticatedClient()
			response, err := client.Call("POST", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Creates a new email address for the specified user.",
		Use:   "create",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.email, "email", "", "The email to create.")
	cmd.MarkFlagRequired("email")
	return cmd
}
func NewGerritAccountsEmailsDeleteCmd() *cobra.Command {
	type flags struct {
		account string
		email   string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/emails/{email-id}"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "email-id", cmdFlags.email)

			client := authenticatedClient()
			response, err := client.Call("DELETE", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Deletes the email address specified.",
		Use:   "delete",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.email, "email", "", "The email to delete.")
	cmd.MarkFlagRequired("email")
	return cmd
}
func NewGerritAccountsEmailsPreferCmd() *cobra.Command {
	type flags struct {
		account string
		email   string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/emails/{email-id}/preferred"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "email-id", cmdFlags.email)

			client := authenticatedClient()
			response, err := client.Call("PUT", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Sets the preferred email address for the specified user.",
		Use:   "prefer",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.email, "email", "", "The email to set as preferred.")
	cmd.MarkFlagRequired("email")
	return cmd
}
func NewGerritAccountsSshkeysCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "SSH keys of an account.",
		Use:     "sshkeys",
	}
	cmd.AddCommand(NewGerritAccountsSshkeysListCmd())
	cmd.AddCommand(NewGerritAccountsSshkeysGetCmd())
	cmd.AddCommand(NewGerritAccountsSshkeysDeleteCmd())
	return cmd
}
func NewGerritAccountsSshkeysListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/sshkeys/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Returns the SSH keys of an account.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsSshkeysGetCmd() *cobra.Command {
	type flags struct {
		account string
		sshkey  string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/sshkeys/{ssh-key-id}"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "ssh-key-id", cmdFlags.sshkey)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Returns the SSH key specified.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.sshkey, "sshkey", "", "The SSH key to get.")
	cmd.MarkFlagRequired("sshkey")
	return cmd
}
func NewGerritAccountsSshkeysDeleteCmd() *cobra.Command {
	type flags struct {
		account string
		sshkey  string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/sshkeys/{ssh-key-id}/access/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "ssh-key-id", cmdFlags.sshkey)

			client := authenticatedClient()
			response, err := client.Call("DELETE", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Deletes the SSH key specified.",
		Use:   "delete",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.sshkey, "sshkey", "", "The SSH key to delete.")
	cmd.MarkFlagRequired("sshkey")
	return cmd
}
func NewGerritAccountsGpgkeysCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "GPG keys of an account.",
		Use:     "gpgkeys",
	}
	cmd.AddCommand(NewGerritAccountsGpgkeysListCmd())
	cmd.AddCommand(NewGerritAccountsGpgkeysGetCmd())
	cmd.AddCommand(NewGerritAccountsGpgkeysDeleteCmd())
	return cmd
}
func NewGerritAccountsGpgkeysListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/gpgkeys/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Returns the GPG keys of an account.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsGpgkeysGetCmd() *cobra.Command {
	type flags struct {
		account string
		gpgkey  string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/gpgkeys/{gpg-key-id}/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "gpg-key-id", cmdFlags.gpgkey)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Returns the GPG key specified.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.gpgkey, "gpgkey", "", "The GPG key to get.")
	cmd.MarkFlagRequired("gpgkey")
	return cmd
}
func NewGerritAccountsGpgkeysDeleteCmd() *cobra.Command {
	type flags struct {
		account string
		gpgkey  string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/gpgkeys/{gpg-key-id}/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "gpg-key-id", cmdFlags.gpgkey)

			client := authenticatedClient()
			response, err := client.Call("DELETE", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Deletes the GPG key specified.",
		Use:   "delete",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.gpgkey, "gpgkey", "", "The GPG key to delete.")
	cmd.MarkFlagRequired("gpgkey")
	return cmd
}
func NewGerritAccountsCapabilitiesCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Global capabilities that are enabled for the specified user.",
		Use:     "capabilities",
	}
	cmd.AddCommand(NewGerritAccountsCapabilitiesListCmd())
	cmd.AddCommand(NewGerritAccountsCapabilitiesGetCmd())
	return cmd
}
func NewGerritAccountsCapabilitiesListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/capabilities/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Lists the global capabilities that are enabled for the specified user.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsCapabilitiesGetCmd() *cobra.Command {
	type flags struct {
		account    string
		capability string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Aliases: []string{"check"},
		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/capabilities/{capability-id}"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "capability-id", cmdFlags.capability)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Gets the global capability that is enabled for the specified user.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.capability, "capability", "", "The capability to get.")
	cmd.MarkFlagRequired("capability")
	return cmd
}
func NewGerritAccountsGroupsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Lists all groups that contain the specified user as a member.",
		Use:     "groups",
	}
	cmd.AddCommand(NewGerritAccountsGroupsListCmd())
	return cmd
}
func NewGerritAccountsGroupsListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/groups/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Lists all groups that contain the specified user as a member.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsAvatarCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Retrieves the avatar image of the user.",
		Use:     "avatar",
	}
	cmd.AddCommand(NewGerritAccountsAvatarGetCmd())
	cmd.AddCommand(NewGerritAccountsAvatarGetChangeUrlCmd())
	return cmd
}
func NewGerritAccountsAvatarGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/avatar/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Retrieves the avatar image of the user.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsAvatarGetChangeUrlCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/avatar.change.url/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Retrieves the avatar image of the user.",
		Use:   "get-change-url",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsPreferencesCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Retrieves the user’s preferences.",
		Use:     "preferences",
	}
	cmd.AddCommand(NewGerritAccountsPreferencesGetCmd())
	cmd.AddCommand(NewGerritAccountsPreferencesGetDiffCmd())
	cmd.AddCommand(NewGerritAccountsPreferencesGetEditCmd())
	return cmd
}
func NewGerritAccountsPreferencesGetCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/preferences/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Retrieves the user’s preferences.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsPreferencesGetDiffCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/preferences.diff/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Retrieves the user’s diff preferences.",
		Use:   "get-diff",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsPreferencesGetEditCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/preferences.edit/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Retrieves the user’s edit preferences.",
		Use:   "get-edit",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsWatchedProjectsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Projects a user is watching.",
		Use:     "watched-projects",
	}
	cmd.AddCommand(NewGerritAccountsWatchedProjectsListCmd())
	return cmd
}
func NewGerritAccountsWatchedProjectsListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/watched.projects/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Lists the projects a user is watching.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsExternalIdsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "External ids of a user account.",
		Use:     "external-ids",
	}
	cmd.AddCommand(NewGerritAccountsExternalIdsListCmd())
	return cmd
}
func NewGerritAccountsExternalIdsListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/external.ids/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Lists the external ids of a user account.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsAgreementsCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "User’s signed contributor agreements.",
		Use:     "agreements",
	}
	cmd.AddCommand(NewGerritAccountsAgreementsListCmd())
	return cmd
}
func NewGerritAccountsAgreementsListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/agreements/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Lists the user’s signed contributor agreements.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsStarredChangesCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Users starred.changes",
		Use:     "starred-changes",
	}
	cmd.AddCommand(NewGerritAccountsStarredChangesListCmd())
	cmd.AddCommand(NewGerritAccountsStarredChangesStarCmd())
	cmd.AddCommand(NewGerritAccountsStarredChangesUnstarCmd())
	return cmd
}
func NewGerritAccountsStarredChangesListCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/starred.changes/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Lists the users starred.changes",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
func NewGerritAccountsStarredChangesStarCmd() *cobra.Command {
	type flags struct {
		account string
		change  string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Aliases: []string{"add"},
		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/starred.changes/{change-id}/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "change-id", cmdFlags.change)

			client := authenticatedClient()
			response, err := client.Call("PUT", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Stars a change for the user.",
		Use:   "star",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.change, "change", "", "The change to star.")
	cmd.MarkFlagRequired("change")
	return cmd
}
func NewGerritAccountsStarredChangesUnstarCmd() *cobra.Command {
	type flags struct {
		account string
		change  string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Aliases: []string{"delete"},
		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/starred.changes/{change-id}/"
			path = addParamToPath(path, "account-id", cmdFlags.account)
			path = addParamToPath(path, "change-id", cmdFlags.change)

			client := authenticatedClient()
			response, err := client.Call("DELETE", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Unstars a change for the user.",
		Use:   "unstar",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	cmd.Flags().StringVar(&cmdFlags.change, "change", "", "The change to unstar.")
	cmd.MarkFlagRequired("change")
	return cmd
}
func NewGerritAccountsIndexCmd() *cobra.Command {
	type flags struct {
		account string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/accounts/{account-id}/index/"
			path = addParamToPath(path, "account-id", cmdFlags.account)

			client := authenticatedClient()
			response, err := client.Call("POST", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := ioutil.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Adds or updates the account in the secondary index.",
		Use:   "index",
	}
	cmd.Flags().StringVar(&cmdFlags.account, "account", "", "The account to get.")
	cmd.MarkFlagRequired("account")
	return cmd
}
