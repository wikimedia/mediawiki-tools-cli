package gerrit

import (
	"fmt"
	gogerrit "github.com/andygrunwald/go-gerrit"
	logrus "github.com/sirupsen/logrus"
	cobra "github.com/spf13/cobra"
	"io"
)

// This code is generated by tools/code-gen/main.go. DO NOT EDIT.
func NewGerritChangesCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Access Rights Endpoints",
		Use:     "changes",
	}
	cmd.AddCommand(NewGerritChangesListCmd())
	cmd.AddCommand(NewGerritChangesGetCmd())
	cmd.AddCommand(NewGerritChangesDetailCmd())
	cmd.AddCommand(NewGerritChangesTopicCmd())
	cmd.AddCommand(NewGerritChangesInCmd())
	cmd.AddCommand(NewGerritChangesReviewersCmd())
	return cmd
}
func NewGerritChangesListCmd() *cobra.Command {
	type flags struct {
		query string
		limit string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/changes/"
			path = addParamToPath(path, "q", cmdFlags.query)
			path = addParamToPath(path, "n", cmdFlags.limit)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "List Changes",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.query, "query", "", "The query string to use to find changes.")
	cmd.Flags().StringVar(&cmdFlags.limit, "limit", "", "The maximum number of records to return.")
	return cmd
}
func NewGerritChangesGetCmd() *cobra.Command {
	type flags struct {
		change string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/changes/{change-id}/"
			path = addParamToPath(path, "change-id", cmdFlags.change)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Get a Change",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.change, "change", "", "The change to retrieve.")
	err := cmd.MarkFlagRequired("change")
	if err != nil {
		logrus.Error(err)
	}
	return cmd
}
func NewGerritChangesDetailCmd() *cobra.Command {
	type flags struct {
		change string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/changes/{change-id}/detail/"
			path = addParamToPath(path, "change-id", cmdFlags.change)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Get a Change detail",
		Use:   "detail",
	}
	cmd.Flags().StringVar(&cmdFlags.change, "change", "", "The change to retrieve.")
	err := cmd.MarkFlagRequired("change")
	if err != nil {
		logrus.Error(err)
	}
	return cmd
}
func NewGerritChangesTopicCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Change topic",
		Use:     "topic",
	}
	cmd.AddCommand(NewGerritChangesTopicGetCmd())
	return cmd
}
func NewGerritChangesTopicGetCmd() *cobra.Command {
	type flags struct {
		change string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/changes/{change-id}/topic/"
			path = addParamToPath(path, "change-id", cmdFlags.change)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Retrieves the topic of a change.",
		Use:   "get",
	}
	cmd.Flags().StringVar(&cmdFlags.change, "change", "", "The change to retrieve.")
	err := cmd.MarkFlagRequired("change")
	if err != nil {
		logrus.Error(err)
	}
	return cmd
}
func NewGerritChangesInCmd() *cobra.Command {
	type flags struct {
		change string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/changes/{change-id}/in/"
			path = addParamToPath(path, "change-id", cmdFlags.change)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Retrieves the branches and tags in which a change is included.",
		Use:   "in",
	}
	cmd.Flags().StringVar(&cmdFlags.change, "change", "", "The change to retrieve.")
	err := cmd.MarkFlagRequired("change")
	if err != nil {
		logrus.Error(err)
	}
	return cmd
}
func NewGerritChangesReviewersCmd() *cobra.Command {
	cmd := &cobra.Command{

		Example: "",
		Short:   "Reviewers.",
		Use:     "reviewers",
	}
	cmd.AddCommand(NewGerritChangesReviewersListCmd())
	return cmd
}
func NewGerritChangesReviewersListCmd() *cobra.Command {
	type flags struct {
		change string
	}
	cmdFlags := flags{}
	cmd := &cobra.Command{

		Example: "",
		Run: func(cmd *cobra.Command, args []string) {
			path := "/changes/{change-id}/reviewers/"
			path = addParamToPath(path, "change-id", cmdFlags.change)

			client := authenticatedClient()
			response, err := client.Call("GET", path, nil, nil)
			if err != nil {
				logrus.Error(err)
			}
			defer response.Body.Close()
			body, err := io.ReadAll(response.Body)
			if err != nil {
				panic(err)
			}
			body = gogerrit.RemoveMagicPrefixLine(body)
			fmt.Print(string(body))
		},
		Short: "Lists the reviewers of a change.",
		Use:   "list",
	}
	cmd.Flags().StringVar(&cmdFlags.change, "change", "", "The change to retrieve.")
	err := cmd.MarkFlagRequired("change")
	if err != nil {
		logrus.Error(err)
	}
	return cmd
}
